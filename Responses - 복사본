class BybitResponse:
    def __init__(self, trader, response) -> None:
        self.response = response
        self._getValues()
        self._isValid()
        self._isSuccessful()

    def _isValid(self):
        if len(self.response) != 2:
            raise Exception("Invalid Response")
    
    def _isSuccessful(self):
        if self.ret_code == 0 and self.ret_msg == 'OK':
            print('Response is valid')
            return
        else:
            raise Exception("Invalid Response")

    def _getValues(self):
        self.data = self.response[0]
        self.result = self.data['result']
        self.ret_code = self.data['ret_code']
        self.ret_msg = self.data['ret_msg']

class MyPosition(BybitResponse):
    def __init__(self, trader) -> None:
        response = trader.client.LinearPositions.LinearPositions_myPosition(symbol=trader.symbol).result()
        super().__init__(trader, response)

class Candles(BybitResponse):
    def __init__(self, trader, interval, limit, time) -> None:
        response = trader.client.LinearKline.LinearKline_get(symbol=trader.symbol, interval=interval, limit=limit, **{'from':time}).result()
        super().__init__(trader, response)

class TradingRecord(BybitResponse):
    def __init__(self, trader) -> None:
        response = trader.client.LinearMarket.LinearMarket_trading(symbol=trader.symbol).result()
        super().__init__(trader, response)

class MyOrders(BybitResponse):
    def __init__(self, trader, status) -> None:
        response = trader.client.LinearOrder.LinearOrder_getOrders(symbol=trader.symbol, order_status=status).result()
        super().__init__(trader, response)
        self.orders = self.result['data']

    def getNewOrders(self) -> list:
        orders = self.result['data']
        new_orders = []
        for order in orders:
            if order['order_status'] == 'New':
                new_orders.append(order)
        return new_orders